package Main;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Random;
import java.util.logging.Logger;

import Exception.IllegalMoveException;
import Strategy.Strategy;

public class Player {
	private static final Logger logger = Logger.getLogger(Player.class.getName());
	private static final int MAXIMUM_HEALTH = 30;
	private static final int MAXIMUM_MANA_SLOTS = 10;
	private static final int MAXIMUM_HAND_SIZE = 5;
	private static final int STARTING_HAND_SIZE = 3;
	private int health = MAXIMUM_HEALTH;
	private List<Card> deck = Card.list(0, 0, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7, 8);
	private List<Card> hand = new ArrayList<Card>();
	Random random = new Random();
	private final Strategy strategy;
	private int mana = 0;
	Action action;
	private final String name;

	private int manaSlots = 0;

	public Player(String name, Strategy strategy) {
		this.name = name;
		this.strategy = strategy;
	}

	public void giveManaSlots() {
		if (manaSlots < MAXIMUM_MANA_SLOTS) {
			manaSlots++;
		}
	}

	public void refillMana() {
		mana = manaSlots;
	}

	public void drawCard() {
		if (getDeckSize() <= 0) {
			logger.info(this + " bleeds out!");
			health--;
		} else {
			Card card = deck.get(random.nextInt(getDeckSize()));
			deck.remove(card);
			logger.info(this + " draws card:" + card);
			// logger.info("player:" + name + );
			if (hand.size() < MAXIMUM_HAND_SIZE) {
				hand.add(card);
			} else {
				logger.info(this + " drop card " + card + " from overload!");
			}
		}

	}

	public void drawStartingHand() {
		for (int i = 0; i < STARTING_HAND_SIZE; i++) {
			drawCard();
		}
	}

	public boolean canPlay() {
		return hand.stream().filter(card -> card.getValue() <= mana).count() > 0;
	}

	public void playCard(Player anotherPlayer) {
		Move move = strategy.nextMove(mana, health, hand);
		Optional<Card> card = move.getCard();
		// if (card.isPresent()) {
		// playCard(card.get(),anotherPlayer,move.getAction());
		// } else {
		// throw new IllegalMoveException("No card can be played from hand " +
		// hand + " with (" + mana + ") mana.");
		// }
		playCard(card.get(), anotherPlayer, move.getAction());
	}

	public void playCard(Card card, Player anotherPlayer, Action action) {
		mana -= card.getValue();
		hand.remove(card);
		logger.info("play card: " + card.getValue() + " for " + action);
		switch (action) {
		case DAMAGE:
			anotherPlayer.receiveDamage(card);
			break;
		case HEALING:
			heal(card);
			break;
		default:
			throw new IllegalMoveException("unreconized game action" + action);
		}

	}

	private void heal(Card card) {
		health += card.getValue();

	}

	private void receiveDamage(Card card) {
		health -= card.getValue();
	}

	private int getDeckSize() {
		return deck.size();
	}

	public int getHealth() {
		return health;
	}

	public void setHealth(int health) {
		this.health = health;
	}

	@Override
	public String toString() {
		return "Player:" + name + " health=" + health + ", deck=" + deck + ", hand=" + hand + ", mana=" + mana;
	}
}
